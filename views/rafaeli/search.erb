<%
  search_val     = pr[:q].to_s.downcase

  #search_val = 'javascript' unless val.present?
  all_sellers = $users.all(type: 'seller').reverse

  fields = [:name, :title, :location, :desc, :rate] 
  users  = all_sellers.select {|u| 


    

    text = fields.map {|f| " "+u[f].to_s }.join(' ')

    text += (casts_text = $casts.all(user_id: u[:_id]).map {|cast| "#{cast[:desc]} #{cast[:client_name]} #{cast[:title]} #{cast[:custom_time]}" }).join(' ')

    u[:text] = text
    search_val && text.downcase.include?(search_val.to_s) 
  }
  # users   = all_sellers # .select {|u| val && u.to_s.include?(val.to_s) }
  results = users

  results = results.sort_by {|u| search_user_score(u, search_val) }.reverse
  
  x=1
%>

<style>
.main_search_wrapper {
  zmargin-bottom: 10px;
}
.main_search {
  border-radius: 0px;
}
.single_result {
  zbackground-color: whitesmoke;
  padding:5px 10px;
  margin-bottom: 30px;
  display: flex;
  zborder: 4px dashed whitesmoke;
  padding: 30px;
  border-radius: 5px;
}
.name {
  font-weight: bold;
}
.top_row {
  font-size: 14px;
}
.title {
  zcolor: rgb(26, 13, 171);
  color: var(--color1);
  margin:7px 0 3px 0;
  display: block;
  font-size: 20px;
}
.location {
  font-size: 14px;
  color: #746e6e;
}
.desc {
  color: rgb(77, 81, 86);
  font-size: 14px;
  margin: 10px 0;
}
.rate {
  margin-top: 10px;
}
.img_container {
  display: flex;
  justify-content: center;
  align-items: start;
}
.img_container img {
  object-fit: contain;
  width: 100%;
  max-height: 100px;
}
.bottom_link {
  color: rgb(26, 13, 171);
  font-size: 14px;
}
.search_results_wrapper {
  max-width: 900px;
  margin: auto;
  margin-top: 20px;
}
#main_search {
  width: 300px;
  /*border-top: none;
  border-right: none;
  border-left: none;*/
  border-radius: 50px;
  font-size: 14px;
  outline: none;
  color: grey;
  color: #202124;
  padding-left: 45px;
}

span.magnifying_class_search {
  position: absolute;
  top: 3px;
  left: 38px;
  opacity: 0.5;
} 

#main_search:focus {
  -webkit-box-shadow: 2px 3px 0px -2px #ccc;
}

#main_search:focus~.magnifying_class_search {
  opacity: 1;
}

.search_controls select {
  width: 50px;
}

.advanced_search_button {
  margin-left: 10px; 
  display: inline-block; 
  color: grey;
}
.advanced_search_button:hover {
  color: black;
  cursor: pointer;
}
</style>


<!-- <h1 style='font-size: 20px; text-align: center'>Elite Freelancers.</h1> -->

<div class='main_search_wrapper ct'>
  <form method=get action=search style='display: inline-block;'>
    <span style='position: relative;'>
      <input id=main_search name=q class='main_search input1' placeholder='Search...' value="<%=search_val%>" autocomplete />
      <span class=magnifying_class_search>ðŸ”Ž</span>
    </span>
    <button class='btn btn-raised btn-primary'>Go</button>
  </form>
  <%#= erb :'rafaeli/homepage/langs' %>    
  <%#= erb :'rafaeli/homepage/countries' %>    
  <div class='search_controls ct' style='font-size: 15px; display: inline-block;'>
    <br/>  
    <select style='border: none'>
      <option>ðŸŒŽ anywhere</option>
      
      <option <%="selected" if pr[:country]=='us'%>>ðŸ‡ºðŸ‡¸ USA</option>
      <option <%="selected" if pr[:country]=='uk'%>>ðŸ‡¬ðŸ‡§ United Kingdom</option>
      <option <%="selected" if pr[:country]=='eu'%>>ðŸ‡ªðŸ‡º European Union</option>    
      <option <%="selected" if pr[:country]=='ua'%>>ðŸ‡ºðŸ‡¦ ukraine</option>
      <option <%="selected" if pr[:country]=='il'%>>ðŸ‡®ðŸ‡± israel</option>
      <option <%="selected" if pr[:country]=='ae'%>>ðŸ‡¦ðŸ‡ª Dubai</option>    
      
    </select>

    <select style='border: none'>
      <!-- <option>ðŸ‘¤ / ðŸ‘¥ individuals & teams</option> -->
      <option>ðŸ‘¤ individuals</option>
      <option>ðŸ‘¥ teams</option>
    </select>

    <span class='advanced_search_button'>
      <i class='fal fa-gear'></i>
    </span>
  </div>

</div>

<script>

var timing = 3000;

var timeouts = [];

function clearPlaceholderTimeouts() {
  timeouts.map(t => clearTimeout(t));
  $("#main_search").attr('placeholder','').attr('value','');
}

function writePlaceholder(el,val) {
  var len        = val.length;
  clearPlaceholderTimeouts();

  //console.log('writing placeholder for',val)
  for (var i=0; i<=len; i++) {
    var letterTime = ((timing*0.60)/(len))*i;
    let j          = i;
    var subval     = val.substring(0,j);
    var timeout    = setTimeout(()=>{      
      //console.log('writing',val.substring(0,j),j)
      $(el).attr('placeholder',val.substring(0,j));
    },letterTime);
    timeout.subval = subval;
    //console.log(subval,letterTime,timeout,j)
    timeouts.push(timeout);
  }
}


function shuffleArray(arr) {
  return arr.map(value => ({ value, sort: Math.random() })).sort((a, b) => a.sort - b.sort).map(({ value }) => value)
}

function placeholderSuggest() {
  var i    = 0;
  var el   = $("#main_search");
  var vals = ['abcd','efgh','ihjk'];
  vals = ['ReactJS', 'VueJS', 'angularJS', 'emberJS', 'vanillaJS',
    'java', 'c++', 'python', 'node', 'go', 'ruby',
    'express', 'rails', 'django', 'laravel',
    'ios', 'android', 'swift', 'flutter',
    'aws', 'gcp', 'azure', 'heroku'];
  vals = shuffleArray(vals);

  function writePlaceholderHelper() {
    if (!window.writePlaceholderInterval) {
      window.writePlaceholderInterval = setInterval(writePlaceholderHelper,timing);
    }
    i = (i+1)%(vals.length);
    var hasFocus =  $(el).is(':focus');
    var hasVal   =  $(el).val();
    var newVal   = vals[i]+'       ';
    //console.log(i,hasFocus,hasVal);
    if (!hasFocus && !hasVal) writePlaceholder(el,newVal)
  }

  writePlaceholderHelper();
  

  $(el).on('focus',()=>{
    clearPlaceholderTimeouts();
    $("#main_search").attr('placeholder','').attr('value','');
  });
}

<% if !search_val.present? %>
placeholderSuggest();
<% end %>
</script>

<style>
.keywords {
  max-width: 800px;
  margin: auto;
  text-align: center;
}
.single_keyword {
  display: inline-block;
  zcolor: var(--color1);
  color: grey;
  text-transform: lowercase;
  font-size: 13px;
  margin: 0 10px;
}
</style>

<div class='keywords noDisplay'>
<%  
  all_opts = {
    frontend: ['react', 'vue', 'angular', 'ember', 'vanilla'],
    backend:  ['java', 'c++', 'python', 'node', 'go', 'ruby'],
    fullstack: ['express', 'rails', 'django', 'laravel'],
    mobile: ['ios', 'android', 'swift', 'flutter'],
    devops: ['aws', 'gcp', 'azure', 'heroku']
  }.hwia

  opts = all_opts[search_val] || all_opts.keys
  

  keywords = opts
  keywords.each do |keyword|
%>
  <a class='single_keyword <%="selected_val" if search_val==keyword%>' href='/search?q=<%=keyword%>'><%=keyword%></a>
<% end %>
</div>


<% if true || is_verified %>
  <%= erb :'/rafaeli/search_results', locals: {results: results, search_val: search_val} %>
<% else %>
  <%= erb :'/rafaeli/please_apply' %>
<% end %>